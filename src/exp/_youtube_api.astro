---
import { Debug } from "astro/components";
// import fetch from "node-fetch";
// import querystring from "querystring";

const client_id = import.meta.env.yt_client_id;
const client_secret = import.meta.env.yt_client_secret;;
const redirect_uri = "http://localhost:3000/exp";

// Get the URL the user was redirected to
const userRedirectUrl = Astro.url;
const urlObj = new URL(userRedirectUrl);
const authorization_code = urlObj.searchParams.get("code");

let access_token =
    "xxx";

if (!access_token) {
    const fetch_access_token = await fetch(
        "https://oauth2.googleapis.com/token",
        {
            method: "POST",
            body: querystring.stringify({
                code: authorization_code,
                client_id: client_id,
                client_secret: client_secret,
                redirect_uri: redirect_uri,
                grant_type: "authorization_code",
            }),
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
            },
        }
    );

    const fetch_access_token_res = await fetch_access_token.json();
    access_token = await fetch_access_token_res.access_token;

    // Save the access token to a cookie
    // Astro.cookies.set("access_token", access_token, { maxAge: 3600 });
}

/* const get_youtube_subscribe = await fetch(
    `https://www.googleapis.com/youtube/v3/subscriptions?part=snippet,contentDetails&mine=true&key=${client_id}`,
    {
        headers: {
            Authorization: `Bearer ${access_token}`,
        },
    }
);
const youtube_subscribed = await get_youtube_subscribe.json();
console.log(youtube_subscribed); */

async function fetchAllSubscriptions(access_token, nextPageToken = "") {
    const client_id = "your-client-id";
    let allSubscriptions = [];
    let pageToken = nextPageToken;

    while (true) {
        const response = await fetch(
            `https://www.googleapis.com/youtube/v3/subscriptions?part=snippet,contentDetails&mine=true&maxResults=50&pageToken=${pageToken}&key=${client_id}`,
            {
                headers: {
                    Authorization: `Bearer ${access_token}`,
                },
            }
        );

        const { items, nextPageToken } = await response.json();
        allSubscriptions = allSubscriptions.concat(items);

        if (!nextPageToken) {
            break;
        }
        pageToken = nextPageToken;
    }

    return allSubscriptions;
}

const allSubscriptions = await fetchAllSubscriptions(access_token);
console.log(allSubscriptions);

const test = {
    client_id,
    client_secret,
    redirect_uri,
    userRedirectUrl,
    urlObj,
    authorization_code,
    access_token,
};
---

<!-- <Debug {test} /> --><!-- {
    allSubscriptions && allSubscriptions.items.map((item) => (
        <>
            <article>
                <a
                    href={`https://www.youtube.com/channel/${item.snippet.resourceId.channelId}`}
                    target="_blank"
                >
                    <img src={item.snippet.thumbnails.default.url} alt="" />
                    <p>{item.id}</p>
                    <p>{item.snippet.publishedAt}</p>
                    <h2>{item.snippet.title}</h2>
                    <p>{item.snippet.description}</p>
                    <p>{item.snippet.channelId}</p>
                    <p>totalItemCount {item.contentDetails.totalItemCount}</p>
                </a>
            </article>
        </>
    ))
} -->
<Debug {allSubscriptions} />
<a
    href="https://accounts.google.com/o/oauth2/v2/auth?scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fyoutube.readonly&access_type=offline&include_granted_scopes=true&response_type=code&state=state_parameter_passthrough_value&redirect_uri=http%3A%2F%2Flocalhost%3A3000%2Fexp&client_id=64969214374-qerq3mn9lie9rgd9gqdhlo35dudmvtn1.apps.googleusercontent.com"
>
    Click here to authorize the app
</a>

<pre>
    
<p>Received a {Astro.request.method} request to "{Astro.request.url}".</p>
<p>
    Received request headers: <code>{JSON.stringify(Object.fromEntries(Astro.request.headers))}</code>
</p>

</pre>
